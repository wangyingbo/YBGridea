{
  "posts": [
    {
      "content": "\n\n<!DOCTYPE html>\n<html>\n\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n\n  <title>How Do I Declare A Block in Objective-C?</title>\n  <style>body {\n      background-color: #002b36;\n      color: #839496;\n      font-family: Lucida Grande, sans-serif;\n      font-size: 20px;\n      padding: 40px;\n      padding-bottom: 0;\n    }\n\n    strong {\n      color: #268bd2;\n    }\n\n    h1 {\n      font-size: 40px;\n      margin-bottom: 1.5em;\n      text-align: center;\n    }\n\n    h2 {\n      font-weight: normal;\n    }\n\n    .return {\n      color: #2aa198;\n    }\n\n    .name {\n      color: #BC8800;\n    }\n\n    .parameter-types, .parameters {\n      color: #7C9F00;\n    }\n    \n    .nullability {\n      color: #EC407A;\n    }\n\n    .disclaimer {\n      line-height: 2em;\n    }\n\n    code {\n      display: block;\n      font-family: Monaco, Menlo, monospace;\n      font-size: 20px;\n      margin-bottom: 3em;\n      margin-left: 40px;\n      margin-top: 1.5em;\n    }\n\n    footer {\n      font-size: 12px;\n      margin-top: 200px;\n      opacity: 0.4;\n      text-align: right;\n    }\n\n    a {\n      color: #0088D9;\n      text-decoration: none;\n    }\n\n  </style>\n\n  <style media=\"print\">body {\n      background-color: #FFFFFF;\n      font-size: 16px;\n      padding: 20px;\n    }\n\n    h1 {\n      font-size: 28px;\n      margin-bottom: 1em;\n    }\n\n    code {\n      font-size: 16px;\n      margin-bottom: 2em;\n      margin-left: 20px;\n    }\n\n    footer {\n      font-size: 10px;\n      margin-top: 40px;\n    }\n  </style>\n\n  <link rel=\"apple-touch-icon\" sizes=\"57x57\" href=\"apple-touch-icon-57x57.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"114x114\" href=\"apple-touch-icon-114x114.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"72x72\" href=\"apple-touch-icon-72x72.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"144x144\" href=\"apple-touch-icon-144x144.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"60x60\" href=\"apple-touch-icon-60x60.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"120x120\" href=\"apple-touch-icon-120x120.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"76x76\" href=\"apple-touch-icon-76x76.png\">\n  <link rel=\"apple-touch-icon\" sizes=\"152x152\" href=\"apple-touch-icon-152x152.png\">\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon-196x196.png\" sizes=\"196x196\">\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon-160x160.png\" sizes=\"160x160\">\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon-96x96.png\" sizes=\"96x96\">\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon-16x16.png\" sizes=\"16x16\">\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon-32x32.png\" sizes=\"32x32\">\n\n  <link rel=\"mask-icon\" href=\"pinned-tab.svg\" color=\"#002b36\">\n\n</head>\n\n<body>\n  <h1>How Do I Declare A Block in Objective-C?</h1>\n\n  <div>\n    <h2>As a <strong>local variable</strong>:</h2>\n    <code>\n      <span class=\"return\">returnType</span> (^<span class=\"name\">blockName</span>)(<span class=\"parameter-types\">parameterTypes</span>) = ^<span class=\"return\">returnType</span>(<span class=\"parameters\">parameters</span>) {...};\n    </code>\n  </div>\n\n  <div>\n    <h2>As a <strong>property</strong>:</h2>\n    <code>\n      @property (nonatomic, copy, <span class=\"nullability\">nullability</span>) <span class=\"return\">returnType</span> (^<span class=\"name\">blockName</span>)(<span class=\"parameter-types\">parameterTypes</span>);\n    </code>\n  </div>\n\n  <div>\n    <h2>As a <strong>method parameter</strong>:</h2>\n    <code>\n      - (void)someMethodThatTakesABlock:(<span class=\"return\">returnType</span> (^<span class=\"nullability\">nullability</span>)(<span class=\"parameter-types\">parameterTypes</span>))<span class=\"name\">blockName</span>;\n    </code>\n  </div>\n\n  <div>\n    <h2>As an <strong>argument to a method call</strong>:</h2>\n    <code>\n      [someObject someMethodThatTakesABlock:^<span class=\"return\">returnType</span> (<span class=\"parameters\">parameters</span>) {...}];\n    </code>\n  </div>\n  \n  <div>\n    <h2>As a <strong>parameter to a C function</strong>:</h2>\n    <code>\n      void SomeFunctionThatTakesABlock(<span class=\"return\">returnType </span>(^<span class=\"name\">blockName</span>)(<span class=\"parameter-types\">parameterTypes</span>));<br/>\n    </code>\n  </div>\n\n  <div>\n    <h2>As a <strong>typedef</strong>:</h2>\n    <code>\n      typedef <span class=\"return\">returnType</span> (^<span class=\"name\">TypeName</span>)(<span class=\"parameter-types\">parameterTypes</span>);<br/>\n      <span class=\"name\">TypeName</span> blockName = ^<span class=\"return\">returnType</span>(<span class=\"parameters\">parameters</span>) {...};\n    </code>\n  </div>\n\n  <div class=\"disclaimer\">\n    This site is not intended to be an exhaustive list of all possible uses of blocks.<br>\n    If you find yourself needing syntax not listed here, it is likely that a <strong>typedef</strong> would make your\n    code more readable.<br>\n    <br>\n    Unable to access this site due to the profanity in the URL? <strong><a href=\"http://goshdarnblocksyntax.com\">http://goshdarnblocksyntax.com</a></strong>\n    is a more work-friendly mirror.\n  </div>\n\n  <footer>By <a href=\"http://lazerwalker.com\">Em Lazer-Walker</a>, who has a very bad memory for this sort of thing.<br />\n    Like this site? Consider throwing me a few bucks via <a href='https://ko-fi.com/A2223KQN'>Ko-fi</a>.</footer>\n\n  <script>\n    (function (i, s, o, g, r, a, m) {\n      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {\n        (i[r].q = i[r].q || []).push(arguments)\n      }, i[r].l = 1 * new Date(); a = s.createElement(o),\n        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)\n    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');\n\n    ga('create', 'UA-43658906-1', 'fuckingblocksyntax.com');\n    ga('send', 'pageview');\n  </script>\n\n</body>\n\n</html>\n",
      "data": {
        "title": "How Do I Declare A Block in Objective-C?",
        "date": "2022-07-06 17:39:12",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "how-do-i-declare-a-block-in-objective-c"
    },
    {
      "content": "\n> 转载自[pbowden-msft/Unlicense](https://github.com/pbowden-msft/Unlicense)\n\n\n# Unlicense\n<b>Microsoft Office 365/2021/2019/2016 for Mac License Removal Tool</b>\n\nPurpose: Removes current Office 365/2021/2019/2016 for Mac activation license and returns apps to an unlicensed state</br>\nUsage: `Unlicense [--All] [--DetectOnly] [--O365] [--Volume] [--ForceClose]`</br>\nExample: `Unlicense --All --ForceClose`</br>",
      "data": {
        "title": "Microsoft Office 365/2021/2019/2016 for Mac License 移除工具",
        "date": "2022-06-13 14:05:24",
        "tags": [
          "Mac软件",
          "shell"
        ],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "microsoft-office-365202120192016-for-mac-license-yi-chu-gong-ju"
    },
    {
      "content": "\n\n# 介绍\n\nBob 是一款 Mac 端翻译软件，支持**划词翻译**、**截图翻译**以及手动输入翻译。\n\n- [x] 划词翻译\n- [x] 截图翻译\n- [x] 输入翻译\n- [x] 翻译多开\n- [x] 自定义插件\n- [x] 自动识别语种\n- [x] 驼峰拆分、蛇形拆分\n- [x] AppleScript 调用\n- [x] PopClip 调用\n\n# 官网地址 [https://ripperhe.gitee.io/bob/#/](https://ripperhe.gitee.io/bob/#/)\n\n# 安装\n\n### 系统要求\n\n| 版本 | 系统要求 |\n| --- | --- |\n| 0.1.0 - 0.4.0 | macOS 10.12+ |\n| 0.5.0+ | macOS 10.13+ |\n\n### Homebrew Cask 安装（技术人员使用）\n\n```bash\nbrew install --cask bob\n```\n\n### 手动安装（普适）\n\n| 渠道 | 建议 | 下载 |\n| --- | --- | --- |\n| 从 [GitHub release](https://github.com/ripperhe/Bob/releases) 下载 | 国外从这里下载更快 | [点此下载 ⬇](https://github.com/ripperhe/Bob/releases/latest/download/Bob.zip) |\n| 从 [Gitee release](https://gitee.com/ripperhe/Bob/releases) 下载 | 国内从这里下载更快 | [点此下载 ⬇](https://gitee.com/ripperhe/Bob/attach_files/980744/download/Bob.zip) |\n\n下载完成之后，解压并拖拽到**应用程序**文件夹即可\n\n# 如何使用\n\n## 软件介绍\n\n打开bob 偏好设置\n\n![偏好设置](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071904916.png)\n\n软件页面如下图，主要用到以下两个功能。其中`偏好设置`是设置常用快捷键以及用户偏好的，`服务`重点是翻译功能以及截图识别并翻译功能。\n\n![软件页面](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071906587.png)\n\n点击`文本翻译`tab下的“+”号添加一种API，常用的有百度翻译，腾讯翻译，阿里翻译等。其中软件默认提供了一种百度翻译的，不过百度翻译的秘钥是作者免费提供的，不稳定，可以添加完服务以后自己申请对应平台的秘钥，使用自己的秘钥进行翻译。\n\n![文本翻译](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071906502.png)\n\n![添加秘钥](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071907135.png)\n\n其中`简明英汉词典`和`金山词霸`是内置的，可以添加上去。如果使用`简明英汉词典`别忘记下载开源的词典数据库，可以使翻译更精确。\n\n![内置](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071908179.png)\n\n在`文本识别`翻译中，建议使用内置的`离线文本识别`，这个使用的是Mac系统内置的文字识别服务，可免费使用。当前如果感觉系统文字识别效果不好，也可用点击“+”号添加下面的平台服务，自己去申请秘钥添加。\n\n![文本识别](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071909727.png)\n\n在`语音合成`中，同样建议使用系统的`离线语音合成`，调用Mac系统原生的读屏幕功能。同样可以点击“+”号单独申请各个平台独立的秘钥使用。\n\n![语音合成](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071909716.png)\n\n## plugin的介绍。\n\n插件是软件提供的第三方集成服务，可拓展此软件功能。使用方法是，先下载插件，然后双击即可安装。安装过的插件，会在点击“+”号时显示可用状态。\n\n[插件使用教程](https://ripperhe.gitee.io/bob/#/general/quickstart/plugin)\n\n![plugin](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071910199.png)\n\n插件下载过程，首先打开链接[https://github.com/topics/bobplugin](https://github.com/topics/bobplugin)，打开页面如图\n\n![plugin-list](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071911971.jpeg)\n\n然后选择你需要的插件，本例以第一个`bobplugin-google-translate`谷歌翻译插件为例。点击第一个进入页面:\n\n![bobplugin-google-translate](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071912926.jpeg)\n\n点击箭头所指的地方，即Release下面的版本号，点击后进入最新版本的发布页面：\n\n![bobplugin-google-translate release](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071912568.jpeg)\n\n点击箭头所示的，以`.bobplugin`为后缀的文件，会自动下载。下载后的文件，直接双击进行安装：\n\n![install plugin](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071913327.jpeg)\n\n安装后可在全部插件里看到此插件：\n\n![all plugins](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071913315.png)\n\n可以在`服务`里的`文本翻译`的“+”号里添加使用。\n\n![文本翻译添加插件](https://raw.githubusercontent.com/wangyingbo/PrivateImages/master/2022/202206071914167.png)\n\n**插件推荐**\n\n这是 Bob 的一个 google 语法检查插件, 基于 Bob google 翻译插件修改而来。插件会先将输入的文本使用 google 翻译一遍，再把翻译结果用 google 翻译回输入语言，适用于书写英文时查看 Google 翻译推荐的写法，也许可以帮你纠正时态、补充定语、推荐更准确的单词等。\n[https://github.com/tankxu/bobplugin-google-translate-grammar-checker](https://github.com/tankxu/bobplugin-google-translate-grammar-checker)\nBob 的一个Google 翻译插件。使用Google翻译进行翻译，无需翻墙即可使用。\n[https://github.com/roojay520/bobplugin-google-translate](https://github.com/roojay520/bobplugin-google-translate)\n能不能好好好说话。互联网缩写词、潮流词查询等。\n[https://github.com/roojay520/bobplug-nbnhhsh](https://github.com/roojay520/bobplug-nbnhhsh)\n一个 Bob 插件，支持简繁互转，汉字>拼音，汉字>火星文转换。\n[https://github.com/roojay520/bobplug-pinyin](https://github.com/roojay520/bobplug-pinyin)\nGoogle tts文字转语音插件。\n[https://github.com/roojay520/bobplug-google-tts](https://github.com/roojay520/bobplug-google-tts)\n\n\n----\n\n\n# 各个服务平台的申请教程和平台对比\n\n请参考链接  [服务教程与各平台对比](https://ripperhe.gitee.io/bob/#/general/quickstart/service)\n\nBob 的翻译功能是由几种的服务配合完成的，如下所示：\n\n| 服务 | 使用场景 |\n| :-- | :-- |\n| 文本翻译 | 用于翻译文本，**每次翻译都会调用** |\n| 文本识别 | 用于获取图片中的文本，**截图翻译时会调用** |\n| 语音合成 | 用于合成音频，点击翻译页面播放按钮时会调用 |\n\n每种服务我都接入了多家服务商的服务，你可以根据自己的喜好自由选择。\n\n**Bob 本身是不收费的，但使用某些服务可能需要给服务商支付一定的费用，这和 Bob 无关**。\n\n所以你现在有三个选择：\n\n1. 使用 Bob 内置的服务\n    * 这些服务可以直接添加使用，无需额外配置\n    * 这些服务要么本来就是免费的，要么就是填的我的秘钥，然后我共享给大家使用了\n    * 我的秘钥每月的总额度和每秒并发请求数都是有限的，**随着使用人数的增多，一定会出现调用缓慢甚至完全无法使用的情况**\n2. 自行申请私人秘钥\n    * 稳定可靠，申请一次可持续使用\n    * **许多服务都有大量免费额度，私人使用足够了**\n    * 需要自行申请，可能略显繁琐\n3. 自定义插件\n    * 可以利用 `JavaScript` 自定义 API\n    * 可以用于接入一些你需要，但是 Bob 没有接入的服务\n    * 需要一定的编码能力，不过也可以使用他人写好的 Bob 插件\n\n### 已接入的服务\n\n下方列出了 Bob 已接入的所有服务，同时也展示的各大服务商的大致收费情况，**数据仅供参考**。每个服务商的计费规则复杂多样，随着时间推移可能有一定变化。\n\n?> 我针对每个可以申请私人秘钥的服务都写了一篇申请教程，跟随教程应该很快就能申请完成。 💪\n\n文本翻译：\n\n| 服务 | 免费额度 | 超出免费额度 | 并发请求数 | 申请教程 |\n| :-- | :-- | :-- | :-- | :-- |\n| 百度翻译试用版 | - | - | - | 内置服务，无需申请，不保证稳定性 |\n| 金山词霸 | - | - | - | 内置服务，无需申请，不保证稳定性 |\n| 简明英汉词典增强版 | - | - | - | 内置服务，无需申请，不保证稳定性 |\n| 腾讯翻译君 | 每月500万字符 👍 | 58元/100万字符 | 5次/秒 | [点此跳转](service/translate/tencent.md) |\n| 百度翻译 | 完全免费，无限使用 👍 | | 1次/秒 | [点此跳转](service/translate/baidu.md) |\n| 阿里翻译| 每月100万字符 👍 | 50元/100万字符 | 50次/秒 | [点此跳转](service/translate/ali.md) |\n| 有道翻译 | 无 | 48元/100万字符 | 无相关说明 | [点此跳转](service/translate/youdao.md) |\n| 搜狗翻译（即将下线） | 无 | 40元/100万字符 | 50次/秒 | [点此跳转](service/translate/sougou.md) |\n| 彩云小译 | 每月100万字符 👍 | 20元/100万字符 | 无相关说明 | [点此跳转](service/translate/caiyun.md) |\n| 小牛翻译 | 无 | 500元/1000万字符 | 50次/秒 | [点此跳转](service/translate/niu.md) |\n| Google 翻译 | 每月50万字符 | 20美元/100万字符 | 无相关说明 | [点此跳转](service/translate/google.md) |\n\n文本识别：\n\n| 服务 | 免费额度 | 超出免费额度 | 并发请求数 | 申请教程 |\n| :-- | :-- | :-- | :-- | :-- |\n| 离线文本识别 | - | - | - | 内置服务，macOS 11 以上可用，可离线使用 |\n| 百度智能云通用 OCR 试用版 | - | - | - | 内置服务，无需申请，不保证稳定性 |\n| 百度智能云通用 OCR | 每月1000次 👍 | 0.0050元/次 | 2次/秒 | [点此跳转](service/ocr/baidu.md) |\n| 腾讯云通用 OCR | 每月1000次 👍 | 0.15元/次 | 无相关说明 | [点此跳转](service/ocr/tencent.md) |\n| 腾讯云图片翻译 | 每月10000次 👍 | 0.045元/次 | 1次/秒 | [点此跳转](service/ocr/tencentimagetranslate.md) |\n| 有道智云通用 OCR | 无 | 0.01元/次 | 无相关说明 | [点此跳转](service/ocr/youdao.md) |\n| 搜狗深智 OCR（即将下线） | 无 | 0.006元/次 | 无相关说明 | [点此跳转](service/ocr/sougou.md) |\n| Google OCR | 每月1000次 👍 | 1.5美元/1000次 | 1800次/分钟 | [点此跳转](service/ocr/google.md) |\n\n语音合成：\n\n| 服务 | 免费额度 | 超出免费额度 | 并发请求数 | 申请教程 |\n| :-- | :-- | :-- | :-- | :-- |\n| 离线语音合成 | - | - | - | 内置服务，macOS 10.15 以上可用，可离线使用 |\n| 腾讯云语音合成 | 新用户可领取800万字符，3月内有效 | 0.2元/万字符 | 20次/秒（免费试用为3次/秒） | [点此跳转](service/tts/tencent.md) |\n| Google 语音合成 | 每月400万字符 👍 | 4美元/100万字符 | 无相关说明 | [点此跳转](service/tts/google.md) |\n\n## 通过插件接入服务\n\n考虑到部分用户希望自定义 API，Bob 支持以插件的形式自行实现各种服务。将开发完成的插件安装到 Bob，即可像其他普通的服务一样使用。详情见 [使用插件](general/quickstart/plugin.md) 相关文章。\n\n## 如何添加和启用服务?\n\n在 Bob 中打开 「偏好设置-翻译-服务」，这里我以「文本翻译」服务为例\n\n1. 选中「文本翻译」tab 栏\n2. 点击页面下方的 <b><font color=red>+</font></b> 号\n3. 在弹出的菜单中选中自己想要添加的服务\n4. 如果添加的是需要输入秘钥的服务，请将申请的秘钥填到服务详情的对应位置（可以点击 `验证` 按钮测试秘钥是否有效）\n5. 确保自己刚刚创建的服务的开关是<b><font color=red>开启状态</font></b>\n6. 点击页面右下角<b><font color=red>「保存」</font></b>按钮❗️❗️❗️\n\n",
      "data": {
        "title": "开源翻译软件bob使用",
        "date": "2022-03-24 12:51:27",
        "tags": [
          "Mac软件"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/kai-fa-fan-yi-ruan-jian-bob-shi-yong.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "kai-fa-fan-yi-ruan-jian-bob-shi-yong"
    },
    {
      "content": "## 功能\n\n脚本实现了下载安装`ohmyzsh`的常用插件功能，并替换`~/.zshrc`文件的plugins字段配置；\n安装的plugins分别为：\n\n- `zsh-autosuggestions`：[zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 此插件实现了自动补全语法功能，会自动缓存敲过一次的终端命令，并且在下次输入同样命令的前几个字符时，联想出命令；\n\n![](https://hiwyb.github.io/post-images/1638166049959.png)\n\n- `zsh-syntax-highlighting`：[zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting) 此插件可以自动分析输入的Linux 及常用命令是否正确；\n\n![](https://hiwyb.github.io/post-images/1638167911169.gif)\n\n- `z`：[z](https://github.com/rupa/z) 此插件实现了自动跳转目录功能，插件会以哈希表的形式自动记录你访问过的路径，在下次访问时，直接输入文件目录的最后一级，按`tab`即可联想出；\n\n![](https://hiwyb.github.io/post-images/1638166661179.gif)\n\n## 使用\n\n使用前本地需安装 [ohmyzsh](https://github.com/ohmyzsh/ohmyzsh) ，因GitHub国内访问环境不稳定，因此通过gitee 镜像安装；\n```\nsh -c \"$(curl -fsSL https://gitee.com/xrxiao/ohmyzsh/raw/master/tools/install.sh)\"\n```\n\n使用`upgrade_oh_my_zsh`命令可以手动更新升级ohmyzsh。\n\n使用以下脚本自动安装`ohmyzsh`的常用plugins。脚本自动检测本地是否安装`ohmyzsh`，如果没安装过，会直接退出；\n\n```\n#! /bin/bash\n# author: wangyingbo\n# date: 2021-11-26 13:00\n\n# zshrc文件路径\nfile_zshrc=~/.zshrc;\n\necho -e \"\\n\"\n\nfiles=$(ls ~/.oh-my-zsh 2> /dev/null | wc -l) # 判断目录下是否存在已知后缀名文件\nif [ $files -ne 0 ] ; then \n\techo -e \"\\033[32;40m congratulations, the terminal has oh-my-zsh! \\033[0m\"\nelse\n\techo -e \"\\033[31;40m warning: no oh-my-zsh，please install oh-my-zsh first!!! \\033[0m\"\n\texit 1\nfi\n\necho -e \"\\n\"\necho -e \"\\033[33;40m will begin install oh-my-zsh plugins，please wait a minute \\033[0m\"\necho -e \"\\n\"\n\n# z is exist:方法不可用\nisExistZ() {\n\tpara=0\n\tfile=`command -v _z | grep \"_z\"`\n\techo $file\n\tif [[ $file =~ \"_z\" ]] ; then\n\t\tpara=1\n\telse\n\t\techo \"\"\n\tfi\n\treturn $para\n}\n\n# isExistZ\n# resZ=`echo $?`\n# echo $resZ\n# if [[ $resZ -eq 1 ]]; then\n# \techo -e \"\\033[32;40m have installed the plugin z \\033[0m\"\n# else\n# \techo -e \"\\033[33;40m will begin install plugin z \\033[0m\"\n# fi\n\n\nnewPlugins=\"\"\n# 安装 plugin z\nif [[ -d ~/.oh-my-zsh/custom/plugins/z ]]; then\n\techo -e \"\\033[32;40m have installed the plugin z \\033[0m\"\n\techo -e \"\\n\"\nelse\t\n\techo -e \"\\033[33;40m will begin install plugin z \\033[0m\"\n\techo -e \"\\n\"\n\tgit clone https://github.com/rupa/z.git $ZSH_CUSTOM/plugins/z\n\tnewPlugins+=\" z\"\n\techo -e \"\\033[32;40m have installed the plugin z \\033[0m\"\nfi\nif [[ ! -d ~/.oh-my-zsh/custom/plugins/z ]]; then\n\techo -e \"\\033[31;40m error:install plugin zerror! \\033[0m\"\n\texit 1\nfi\n\n# 安装 plugin zsh-autosuggestions\nif [[ -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]]; then\n\techo -e \"\\033[32;40m have installed the plugin zsh-autosuggestions \\033[0m\"\n\techo -e \"\\n\"\nelse\t\n\techo -e \"\\033[33;40m will begin install plugin zsh-autosuggestions \\033[0m\"\n\techo -e \"\\n\"\n\tgit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n\tnewPlugins+=\" zsh-autosuggestions\"\n\techo -e \"\\033[32;40m have installed the plugin zsh-autosuggestions \\033[0m\"\nfi\nif [[ ! -d ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]]; then\n\techo -e \"\\033[31;40m error:install plugin zsh-autosuggestionserror! \\033[0m\"\n\texit 1\nfi\n\n# 安装 zsh-syntax-highlighting\nif [[ -d ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]]; then\n\techo -e \"\\033[32;40m have installed the plugin zsh-syntax-highlighting \\033[0m\"\n\techo -e \"\\n\"\nelse\t\n\techo -e \"\\033[33;40m will begin install plugin zsh-syntax-highlighting \\033[0m\"\n\techo -e \"\\n\"\n\tgit clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n\tnewPlugins+=\" zsh-syntax-highlighting\"\n\techo -e \"\\033[32;40m have installed the plugin zsh-syntax-highlighting \\033[0m\"\nfi\nif [[ ! -d ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]]; then\n\techo -e \"\\033[31;40m error:install plugin zsh-syntax-highlightingerror! \\033[0m\"\n\texit 1\nfi\n\n# 匹配以plugin开头，以)结尾的字符串\nplugins=`grep \"^plugin.*)$\" $file_zshrc`\necho \"current plugins: $plugins\"\necho -e \"\\n\"\n\n# newPlugins+=\" z\"\n# newPlugins+=\" zsh-autosuggestions\"\n# newPlugins+=\" zsh-syntax-highlighting\"\necho \"new plugins：$newPlugins\"\necho -e \"\\n\"\n\n# 获取已有的plugin的长度\noriLength=${#plugins}\n# echo \"原来plugins字符串长度是：$oriLength\"\n# echo -e \"\\n\"\nreplaceIndex=$oriLength-1\n\n# 合并为新的plugins\nreplacePlugins=${plugins:0:$replaceIndex}$newPlugins${plugins:$replaceIndex}\necho \"merged plugins：$replacePlugins\"\necho -e \"\\n\"\n\n# 将某个文件中的字符串替换为新字符串 mac环境和linux环境 sed -i 使用不同\n# Mac使用：https://www.cnblogs.com/chunzhulovefeiyue/p/6561497.html\n# Linux使用：https://www.cnblogs.com/A121/p/10621152.html\n\n# eg:把文件中的jack替换成tom，并给源文件添加.backup后缀并备份；添加/g是全部替换，默认每行只替换一次。\n# sed -i \".backup\" 's/jack/tom/g' $file_zshrc\n\nsed -i \".backup\" \"s/$plugins/$replacePlugins/\" $file_zshrc\n\ntotalPlugins=`grep \"^plugin.*)$\" $file_zshrc`\necho \"total end plugin: $totalPlugins\"\necho -e \"\\n\"\n\n# 更新 .zshrc 文件\nsource $file_zshrc\n\n# 输出脚本执行用时\necho -e \"\\n\"\necho -e \"\\033[32;40m this shell script execution duration(脚本执行时长): ${SECONDS}s  \\033[0m\"\n\n```",
      "data": {
        "title": "一键安装ohmyzsh常用插件的脚本",
        "date": "2021-11-29 14:02:45",
        "tags": [
          "Linux",
          "shell"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/yi-jian-an-zhuang-ohmyzsh-cha-jian-de-jiao-ben.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "yi-jian-an-zhuang-ohmyzsh-cha-jian-de-jiao-ben"
    },
    {
      "content": "# ybproxy-auto-request\n\n[GitHub 地址：https://github.com/wangyingbo/ybproxy-auto-request](https://github.com/wangyingbo/ybproxy-auto-request)\n\n## 脚本作用\n\n- 利用github actions 自动访问请求herokuapp和netlify免费服务器的网址；实现herokuapp和netlify免费账号能一直保活。\n- 会把更新时间插入到recordtime.txt文件里，根据最新时间倒序排列；\n\n## 使用\n\n如果你有一台Linux主机，或者你有一台不经常关机的Mac，那么你可以利用系统自带的`crontab`定时任务命令来执行定时任务。\n\n在终端输入`crontab -e` 命令，可以进入crontab定时任务编辑页，我们可以在这个文本里利用vim添加一条定时任务`crontab.sh`，添加完毕用`wq`保存退出；\n\n![](https://hiwyb.github.io/post-images/1637566962477.png)\n\n添加成功以后，可利用`crontab -l`命令查看添加的任务；\n\n![](https://hiwyb.github.io/post-images/1637566978330.png)\n\n添加成功以后，需要重启cron进程：\n\n```\nservice crond restart\n```\n\n可查看crontab的执行日志：\n\n```\ncat /var/log/cron\n\n```\n\n## crontab.sh脚本如下：\n\n```\n#!/bin/bash\n# author wangyingbo\n\ncd /root/Desktop/Projects/ybproxy-auto-request\ngit pull --rebase\nDATE=`date +%Y%m%d%H%M%S`\necho \"current git push time: $DATE\"\n# 插入到最后一行\n# echo $DATE >> ./recordtime.txt\n# 插入到第一行\nsed -i \"1i$DATE\" ./recordtime.txt\ngit add recordtime.txt\ngit commit --allow-empty -m \" update auto request ybproxy\"\ngit push \nsleep 1\necho -e \"\\033[33;40m  ($0) ${TIME}: this shell script execution duration: ${SECONDS}s  \\033[0m\"\necho \"😊😊😊😊😊😊success excute shell😊😊😊😊😊😊\"\n\n```",
      "data": {
        "title": "利用crontab定时请求网站",
        "date": "2021-11-22 15:36:08",
        "tags": [
          "GitHub"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/li-yong-crontab-ding-shi-qing-qiu-wang-zhan.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "li-yong-crontab-ding-shi-qing-qiu-wang-zhan"
    },
    {
      "content": "# auto-green\n\n\n自动保持 GitHub 提交状态常绿。\n\n> a commit a day keeps your girlfriend away.\n\n\n## GitHub地址: [https://github.com/wangyingbo/yb-auto-green](https://github.com/wangyingbo/yb-auto-green) \n\n## 原理\n\n使用 GitHub Actions 的定时任务功能，每隔一段时间自动执行 `git commit`，提交信息为 \"a commit a day keeps your girlfriend away\"，灵感来自知乎问题[在 GitHub 上保持 365 天全绿是怎样一种体验？](https://www.zhihu.com/question/34043434/answer/57826281)下某匿名用户的回答：\n\n> 曾经保持了 200 多天全绿，但是冷落了女朋友，一直绿到现在。\n\n## 使用\n\n- 点右上角 **Use this template** 按钮复制本 GitHub 仓库，**:warning: 千万不要 Fork，因为 fork 项目的动态并不会让你变绿 :warning:**\n- 修改 [ci.yml 文件的第 19、20 行](https://github.com/justjavac/auto-green/blob/master/.github/workflows/ci.yml#L19) 为自己的 GitHub 账号和昵称\n- (可选) 你可以通过修改 [ci.yml 文件的第 8 行](https://github.com/justjavac/auto-green/blob/master/.github/workflows/ci.yml#L8)来调整频率\n\n计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。\n\n```plain\n┌───────────── 分钟 (0 - 59)\n│ ┌───────────── 小时 (0 - 23)\n│ │ ┌───────────── 日 (1 - 31)\n│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)\n│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)\n│ │ │ │ │\n│ │ │ │ │\n│ │ │ │ │\n* * * * *\n```\n\n每个时间字段的含义：\n\n|符号   | 描述        | 举例                                        |\n| ----- | -----------| -------------------------------------------|\n| `*`   | 任意值      | `* * * * *` 每天每小时每分钟                  |\n| `,`   | 值分隔符    | `1,3,4,7 * * * *` 每小时的 1 3 4 7 分钟       |\n| `-`   | 范围       | `1-6 * * * *` 每小时的 1-6 分钟               |\n| `/`   | 每         | `*/15 * * * *` 每隔 15 分钟                  |\n\n**注**：由于 GitHub Actions 的限制，如果设置为 `* * * * *` 实际的执行频率为每 5 分执行一次。\n\n## 自动执行crontab.sh配置\n\n```\n#!/bin/bash\n# author wangyingbo\n\necho \"--------current path:-------\"\necho $PWD\ncd $PWD\n\ngit pull --rebase\ngit commit --allow-empty -m \"a commit a day keeps your girlfriend away\"\ngit push\n\nsleep 1\necho -e \"\\033[33;40m  ($0) ${TIME}: this shell script execution duration: ${SECONDS}s  \\033[0m\"\necho \"😊😊😊😊😊😊success excute shell😊😊😊😊😊😊\"\n```\n\n\n\n",
      "data": {
        "title": "保持GitHub 常绿",
        "date": "2021-11-22 15:18:00",
        "tags": [
          "GitHub"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/bao-chi-github-chang-lu.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "bao-chi-github-chang-lu"
    },
    {
      "content": "\n\n\n> 转自：开源Linux 作者：A哥 （侵删）\n> 原文链接：[https://www.pythondesign.cn/994.html](https://www.pythondesign.cn/994.html)\n\n### 功能\n\n通过crontab 定时任务，可设置每日定时执行脚本，分析主机性能、网络等使用情况，并把结果通过邮箱的形式发送出去。\n\n### 说明\n\n此脚本是备份自运维大佬 [A哥](https://www.pythondesign.cn/994.html)。\n\n```\n#!/bin/bash\n# @Author: HanWei\n# @Date:   2020-03-16 09:56:57\n# @Last Modified by:   HanWei\n# @Last Modified time: 2020-03-16 11:06:31\n# @E-mail: han_wei_95@163.com\n#!/bin/bash\n# 主机信息每日巡检 https://zhuanlan.zhihu.com/p/429238956\n \nIPADDR=$(ifconfig eth0|grep 'inet addr'|awk -F '[ :]' '{print $13}')\n#环境变量PATH没设好，在cron里执行时有很多命令会找不到\nexport PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\nsource /etc/profile\n \n[ $(id -u) -gt 0 ] && echo \"请用root用户执行此脚本！\" && exit 1\ncentosVersion=$(awk '{print $(NF-1)}' /etc/redhat-release)\nVERSION=\"2020-03-16\"\n \n#日志相关\nPROGPATH=`echo $0 | sed -e 's,[\\\\/][^\\\\/][^\\\\/]*$,,'`\n[ -f $PROGPATH ] && PROGPATH=\".\"\nLOGPATH=\"$PROGPATH/log\"\n[ -e $LOGPATH ] || mkdir $LOGPATH\nRESULTFILE=\"$LOGPATH/HostDailyCheck-$IPADDR-`date +%Y%m%d`.txt\"\n \n \n#定义报表的全局变量\nreport_DateTime=\"\" #日期 ok\nreport_Hostname=\"\" #主机名 ok\nreport_OSRelease=\"\" #发行版本 ok\nreport_Kernel=\"\" #内核 ok\nreport_Language=\"\" #语言/编码 ok\nreport_LastReboot=\"\" #最近启动时间 ok\nreport_Uptime=\"\" #运行时间（天） ok\nreport_CPUs=\"\" #CPU数量 ok\nreport_CPUType=\"\" #CPU类型 ok\nreport_Arch=\"\" #CPU架构 ok\nreport_MemTotal=\"\" #内存总容量(MB) ok\nreport_MemFree=\"\" #内存剩余(MB) ok\nreport_MemUsedPercent=\"\" #内存使用率% ok\nreport_DiskTotal=\"\" #硬盘总容量(GB) ok\nreport_DiskFree=\"\" #硬盘剩余(GB) ok\nreport_DiskUsedPercent=\"\" #硬盘使用率% ok\nreport_InodeTotal=\"\" #Inode总量 ok\nreport_InodeFree=\"\" #Inode剩余 ok\nreport_InodeUsedPercent=\"\" #Inode使用率 ok\nreport_IP=\"\" #IP地址 ok\nreport_MAC=\"\" #MAC地址 ok\nreport_Gateway=\"\" #默认网关 ok\nreport_DNS=\"\" #DNS ok\nreport_Listen=\"\" #监听 ok\nreport_Selinux=\"\" #Selinux ok\nreport_Firewall=\"\" #防火墙 ok\nreport_USERs=\"\" #用户 ok\nreport_USEREmptyPassword=\"\" #空密码用户 ok\nreport_USERTheSameUID=\"\" #相同ID的用户 ok \nreport_PasswordExpiry=\"\" #密码过期（天） ok\nreport_RootUser=\"\" #root用户 ok\nreport_Sudoers=\"\" #sudo授权 ok\nreport_SSHAuthorized=\"\" #SSH信任主机 ok\nreport_SSHDProtocolVersion=\"\" #SSH协议版本 ok\nreport_SSHDPermitRootLogin=\"\" #允许root远程登录 ok\nreport_DefunctProsess=\"\" #僵尸进程数量 ok\nreport_SelfInitiatedService=\"\" #自启动服务数量 ok\nreport_SelfInitiatedProgram=\"\" #自启动程序数量 ok\nreport_RuningService=\"\" #运行中服务数 ok\nreport_Crontab=\"\" #计划任务数 ok\nreport_Syslog=\"\" #日志服务 ok\nreport_SNMP=\"\" #SNMP OK\nreport_NTP=\"\" #NTP ok\nreport_JDK=\"\" #JDK版本 ok\nfunction version(){\necho \"\"\necho \"\"\necho \"系统巡检脚本：Version $VERSION\"\n}\n \nfunction getCpuStatus(){\necho \"\"\necho \"\"\necho \"############################ CPU检查 #############################\"\nPhysical_CPUs=$(grep \"physical id\" /proc/cpuinfo| sort | uniq | wc -l)\nVirt_CPUs=$(grep \"processor\" /proc/cpuinfo | wc -l)\nCPU_Kernels=$(grep \"cores\" /proc/cpuinfo|uniq| awk -F ': ' '{print $2}')\nCPU_Type=$(grep \"model name\" /proc/cpuinfo | awk -F ': ' '{print $2}' | sort | uniq)\nCPU_Arch=$(uname -m)\necho \"物理CPU个数:$Physical_CPUs\"\necho \"逻辑CPU个数:$Virt_CPUs\"\necho \"每CPU核心数:$CPU_Kernels\"\necho \" CPU型号:$CPU_Type\"\necho \" CPU架构:$CPU_Arch\"\n#报表信息\nreport_CPUs=$Virt_CPUs #CPU数量\nreport_CPUType=$CPU_Type #CPU类型\nreport_Arch=$CPU_Arch #CPU架构\n}\n \nfunction getMemStatus(){\necho \"\"\necho \"\"\necho \"############################ 内存检查 ############################\"\nif [[ $centosVersion < 7 ]];then\nfree -mo\nelse\nfree -h\nfi\n#报表信息\nMemTotal=$(grep MemTotal /proc/meminfo| awk '{print $2}') #KB\nMemFree=$(grep MemFree /proc/meminfo| awk '{print $2}') #KB\nlet MemUsed=MemTotal-MemFree\nMemPercent=$(awk \"BEGIN {if($MemTotal==0){printf 100}else{printf \\\"%.2f\\\",$MemUsed*100/$MemTotal}}\")\nreport_MemTotal=\"$((MemTotal/1024))\"\"MB\" #内存总容量(MB)\nreport_MemFree=\"$((MemFree/1024))\"\"MB\" #内存剩余(MB)\nreport_MemUsedPercent=\"$(awk \"BEGIN {if($MemTotal==0){printf 100}else{printf \\\"%.2f\\\",$MemUsed*100/$MemTotal}}\")\"\"%\" #内存使用率%\n}\nfunction getDiskStatus(){\necho \"\"\necho \"\"\necho \"############################ 磁盘检查 ############################\"\ndf -hiP | sed 's/Mounted on/Mounted/'> /tmp/inode\ndf -hTP | sed 's/Mounted on/Mounted/'> /tmp/disk \njoin /tmp/disk /tmp/inode | awk '{print $1,$2,\"|\",$3,$4,$5,$6,\"|\",$8,$9,$10,$11,\"|\",$12}'| column -t\n#报表信息\ndiskdata=$(df -TP | sed '1d' | awk '$2!=\"tmpfs\"{print}') #KB\ndisktotal=$(echo \"$diskdata\" | awk '{total+=$3}END{print total}') #KB\ndiskused=$(echo \"$diskdata\" | awk '{total+=$4}END{print total}') #KB\ndiskfree=$((disktotal-diskused)) #KB\ndiskusedpercent=$(echo $disktotal $diskused | awk '{if($1==0){printf 100}else{printf \"%.2f\",$2*100/$1}}') \ninodedata=$(df -iTP | sed '1d' | awk '$2!=\"tmpfs\"{print}')\ninodetotal=$(echo \"$inodedata\" | awk '{total+=$3}END{print total}')\ninodeused=$(echo \"$inodedata\" | awk '{total+=$4}END{print total}')\ninodefree=$((inodetotal-inodeused))\ninodeusedpercent=$(echo $inodetotal $inodeused | awk '{if($1==0){printf 100}else{printf \"%.2f\",$2*100/$1}}')\nreport_DiskTotal=$((disktotal/1024/1024))\"GB\" #硬盘总容量(GB)\nreport_DiskFree=$((diskfree/1024/1024))\"GB\" #硬盘剩余(GB)\nreport_DiskUsedPercent=\"$diskusedpercent\"\"%\" #硬盘使用率%\nreport_InodeTotal=$((inodetotal/1000))\"K\" #Inode总量\nreport_InodeFree=$((inodefree/1000))\"K\" #Inode剩余\nreport_InodeUsedPercent=\"$inodeusedpercent\"\"%\" #Inode使用率%\n \n}\n \nfunction getSystemStatus(){\necho \"\"\necho \"\"\necho \"############################ 系统检查 ############################\"\nif [ -e /etc/sysconfig/i18n ];then\ndefault_LANG=\"$(grep \"LANG=\" /etc/sysconfig/i18n | grep -v \"^#\" | awk -F '\"' '{print $2}')\"\nelse\ndefault_LANG=$LANG\nfi\nexport LANG=\"en_US.UTF-8\"\nRelease=$(cat /etc/redhat-release 2>/dev/null)\nKernel=$(uname -r)\nOS=$(uname -o)\nHostname=$(uname -n)\nSELinux=$(/usr/sbin/sestatus | grep \"SELinux status: \" | awk '{print $3}')\nLastReboot=$(who -b | awk '{print $3,$4}')\nuptime=$(uptime | sed 's/.*up \\([^,]*\\), .*/\\1/')\necho \" 系统：$OS\"\necho \" 发行版本：$Release\"\necho \" 内核：$Kernel\"\necho \" 主机名：$Hostname\"\necho \" SELinux：$SELinux\"\necho \"语言/编码：$default_LANG\"\necho \" 当前时间：$(date +'%F %T')\"\necho \" 最后启动：$LastReboot\"\necho \" 运行时间：$uptime\"\n#报表信息\nreport_DateTime=$(date +\"%F %T\") #日期\nreport_Hostname=\"$Hostname\" #主机名\nreport_OSRelease=\"$Release\" #发行版本\nreport_Kernel=\"$Kernel\" #内核\nreport_Language=\"$default_LANG\" #语言/编码\nreport_LastReboot=\"$LastReboot\" #最近启动时间\nreport_Uptime=\"$uptime\" #运行时间（天）\nreport_Selinux=\"$SELinux\"\nexport LANG=\"$default_LANG\"\n \n}\n \nfunction getServiceStatus(){\necho \"\"\necho \"\"\necho \"############################ 服务检查 ############################\"\necho \"\"\nif [[ $centosVersion > 7 ]];then\nconf=$(systemctl list-unit-files --type=service --state=enabled --no-pager | grep \"enabled\")\nprocess=$(systemctl list-units --type=service --state=running --no-pager | grep \".service\")\n#报表信息\nreport_SelfInitiatedService=\"$(echo \"$conf\" | wc -l)\" #自启动服务数量\nreport_RuningService=\"$(echo \"$process\" | wc -l)\" #运行中服务数量\nelse\nconf=$(/sbin/chkconfig | grep -E \":on|:启用\")\nprocess=$(/sbin/service --status-all 2>/dev/null | grep -E \"is running|正在运行\")\n#报表信息\nreport_SelfInitiatedService=\"$(echo \"$conf\" | wc -l)\" #自启动服务数量\nreport_RuningService=\"$(echo \"$process\" | wc -l)\" #运行中服务数量\nfi\necho \"服务配置\"\necho \"--------\"\necho \"$conf\" | column -t\necho \"\"\necho \"正在运行的服务\"\necho \"--------------\"\necho \"$process\"\n \n}\n \n \nfunction getAutoStartStatus(){\necho \"\"\necho \"\"\necho \"############################ 自启动检查 ##########################\"\nconf=$(grep -v \"^#\" /etc/rc.d/rc.local| sed '/^$/d')\necho \"$conf\"\n#报表信息\nreport_SelfInitiatedProgram=\"$(echo $conf | wc -l)\" #自启动程序数量\n}\n \nfunction getLoginStatus(){\necho \"\"\necho \"\"\necho \"############################ 登录检查 ############################\"\nlast | head\n}\n \nfunction getNetworkStatus(){\necho \"\"\necho \"\"\necho \"############################ 网络检查 ############################\"\nif [[ $centosVersion < 7 ]];then\n/sbin/ifconfig -a | grep -v packets | grep -v collisions | grep -v inet6\nelse\n#ip a\nfor i in $(ip link | grep BROADCAST | awk -F: '{print $2}');do ip add show $i | grep -E \"BROADCAST|global\"| awk '{print $2}' | tr '\\n' ' ' ;echo \"\" ;done\nfi\nGATEWAY=$(ip route | grep default | awk '{print $3}')\nDNS=$(grep nameserver /etc/resolv.conf| grep -v \"#\" | awk '{print $2}' | tr '\\n' ',' | sed 's/,$//')\necho \"\"\necho \"网关：$GATEWAY \"\necho \" DNS：$DNS\"\n#报表信息\nIP=$(ip -f inet addr | grep -v 127.0.0.1 | grep inet | awk '{print $NF,$2}' | tr '\\n' ',' | sed 's/,$//')\nMAC=$(ip link | grep -v \"LOOPBACK\\|loopback\" | awk '{print $2}' | sed 'N;s/\\n//' | tr '\\n' ',' | sed 's/,$//')\nreport_IP=\"$IP\" #IP地址\nreport_MAC=$MAC #MAC地址\nreport_Gateway=\"$GATEWAY\" #默认网关\nreport_DNS=\"$DNS\" #DNS\n}\n \nfunction getListenStatus(){\necho \"\"\necho \"\"\necho \"############################ 监听检查 ############################\"\nTCPListen=$(ss -ntul | column -t)\necho \"$TCPListen\"\n#报表信息\nreport_Listen=\"$(echo \"$TCPListen\"| sed '1d' | awk '/tcp/ {print $5}' | awk -F: '{print $NF}' | sort | uniq | wc -l)\"\n}\n \nfunction getCronStatus(){\necho \"\"\necho \"\"\necho \"############################ 计划任务检查 ########################\"\nCrontab=0\nfor shell in $(grep -v \"/sbin/nologin\" /etc/shells);do\nfor user in $(grep \"$shell\" /etc/passwd| awk -F: '{print $1}');do\ncrontab -l -u $user >/dev/null 2>&1\nstatus=$?\nif [ $status -eq 0 ];then\necho \"$user\"\necho \"--------\"\ncrontab -l -u $user\nlet Crontab=Crontab+$(crontab -l -u $user | wc -l)\necho \"\"\nfi\ndone\ndone\n#计划任务\nfind /etc/cron* -type f | xargs -i ls -l {} | column -t\nlet Crontab=Crontab+$(find /etc/cron* -type f | wc -l)\n#报表信息\nreport_Crontab=\"$Crontab\" #计划任务数\n}\nfunction getHowLongAgo(){\n# 计算一个时间戳离现在有多久了\ndatetime=\"$*\"\n[ -z \"$datetime\" ] && echo \"错误的参数：getHowLongAgo() $*\"\nTimestamp=$(date +%s -d \"$datetime\") #转化为时间戳\nNow_Timestamp=$(date +%s)\nDifference_Timestamp=$(($Now_Timestamp-$Timestamp))\ndays=0;hours=0;minutes=0;\nsec_in_day=$((60*60*24));\nsec_in_hour=$((60*60));\nsec_in_minute=60\nwhile (( $(($Difference_Timestamp-$sec_in_day)) > 1 ))\ndo\nlet Difference_Timestamp=Difference_Timestamp-sec_in_day\nlet days++\ndone\nwhile (( $(($Difference_Timestamp-$sec_in_hour)) > 1 ))\ndo\nlet Difference_Timestamp=Difference_Timestamp-sec_in_hour\nlet hours++\ndone\necho \"$days 天 $hours 小时前\"\n}\n \nfunction getUserLastLogin(){\n# 获取用户最近一次登录的时间，含年份\n# 很遗憾last命令不支持显示年份，只有\"last -t YYYYMMDDHHMMSS\"表示某个时间之间的登录，我\n# 们只能用最笨的方法了，对比今天之前和今年元旦之前（或者去年之前和前年之前……）某个用户\n# 登录次数，如果登录统计次数有变化，则说明最近一次登录是今年。\nusername=$1\n: ${username:=\"`whoami`\"}\nthisYear=$(date +%Y)\noldesYear=$(last | tail -n1 | awk '{print $NF}')\nwhile(( $thisYear >= $oldesYear));do\nloginBeforeToday=$(last $username | grep $username | wc -l)\nloginBeforeNewYearsDayOfThisYear=$(last $username -t $thisYear\"0101000000\" | grep $username | wc -l)\nif [ $loginBeforeToday -eq 0 ];then\necho \"从未登录过\"\nbreak\nelif [ $loginBeforeToday -gt $loginBeforeNewYearsDayOfThisYear ];then\nlastDateTime=$(last -i $username | head -n1 | awk '{for(i=4;i<(NF-2);i++)printf\"%s \",$i}')\" $thisYear\" #格式如: Sat Nov 2 20:33 2015\nlastDateTime=$(date \"+%Y-%m-%d %H:%M:%S\" -d \"$lastDateTime\")\necho \"$lastDateTime\"\nbreak\nelse\nthisYear=$((thisYear-1))\nfi\ndone\n \n}\n \nfunction getUserStatus(){\necho \"\"\necho \"\"\necho \"############################ 用户检查 ############################\"\n#/etc/passwd 最后修改时间\npwdfile=\"$(cat /etc/passwd)\"\nModify=$(stat /etc/passwd | grep Modify | tr '.' ' ' | awk '{print $2,$3}')\n \necho \"/etc/passwd 最后修改时间：$Modify ($(getHowLongAgo $Modify))\"\necho \"\"\necho \"特权用户\"\necho \"--------\"\nRootUser=\"\"\nfor user in $(echo \"$pwdfile\" | awk -F: '{print $1}');do\nif [ $(id -u $user) -eq 0 ];then\necho \"$user\"\nRootUser=\"$RootUser,$user\"\nfi\ndone\necho \"\"\necho \"用户列表\"\necho \"--------\"\nUSERs=0\necho \"$(\necho \"用户名 UID GID HOME SHELL 最后一次登录\"\nfor shell in $(grep -v \"/sbin/nologin\" /etc/shells);do\nfor username in $(grep \"$shell\" /etc/passwd| awk -F: '{print $1}');do\nuserLastLogin=\"$(getUserLastLogin $username)\"\necho \"$pwdfile\" | grep -w \"$username\" |grep -w \"$shell\"| awk -F: -v lastlogin=\"$(echo \"$userLastLogin\" | tr ' ' '_')\" '{print $1,$3,$4,$6,$7,lastlogin}'\ndone\nlet USERs=USERs+$(echo \"$pwdfile\" | grep \"$shell\"| wc -l)\ndone\n)\" | column -t\necho \"\"\necho \"空密码用户\"\necho \"----------\"\nUSEREmptyPassword=\"\"\nfor shell in $(grep -v \"/sbin/nologin\" /etc/shells);do\nfor user in $(echo \"$pwdfile\" | grep \"$shell\" | cut -d: -f1);do\nr=$(awk -F: '$2==\"!!\"{print $1}' /etc/shadow | grep -w $user)\nif [ ! -z $r ];then\necho $r\nUSEREmptyPassword=\"$USEREmptyPassword,\"$r\nfi\ndone \ndone\necho \"\"\necho \"相同ID的用户\"\necho \"------------\"\nUSERTheSameUID=\"\"\nUIDs=$(cut -d: -f3 /etc/passwd | sort | uniq -c | awk '$1>1{print $2}')\nfor uid in $UIDs;do\necho -n \"$uid\";\nUSERTheSameUID=\"$uid\"\nr=$(awk -F: 'ORS=\"\";$3=='\"$uid\"'{print \":\",$1}' /etc/passwd)\necho \"$r\"\necho \"\"\nUSERTheSameUID=\"$USERTheSameUID $r,\"\ndone\n#报表信息\nreport_USERs=\"$USERs\" #用户\nreport_USEREmptyPassword=$(echo $USEREmptyPassword | sed 's/^,//') \nreport_USERTheSameUID=$(echo $USERTheSameUID | sed 's/,$//') \nreport_RootUser=$(echo $RootUser | sed 's/^,//') #特权用户\n}\n \n \nfunction getPasswordStatus {\necho \"\"\necho \"\"\necho \"############################ 密码检查 ############################\"\npwdfile=\"$(cat /etc/passwd)\"\necho \"\"\necho \"密码过期检查\"\necho \"------------\"\nresult=\"\"\nfor shell in $(grep -v \"/sbin/nologin\" /etc/shells);do\nfor user in $(echo \"$pwdfile\" | grep \"$shell\" | cut -d: -f1);do\nget_expiry_date=$(/usr/bin/chage -l $user | grep 'Password expires' | cut -d: -f2)\nif [[ $get_expiry_date = ' never' || $get_expiry_date = 'never' ]];then\nprintf \"%-15s 永不过期\\n\" $user\nresult=\"$result,$user:never\"\nelse\npassword_expiry_date=$(date -d \"$get_expiry_date\" \"+%s\")\ncurrent_date=$(date \"+%s\")\ndiff=$(($password_expiry_date-$current_date))\nlet DAYS=$(($diff/(60*60*24)))\nprintf \"%-15s %s天后过期\\n\" $user $DAYS\nresult=\"$result,$user:$DAYS days\"\nfi\ndone\ndone\nreport_PasswordExpiry=$(echo $result | sed 's/^,//')\n \necho \"\"\necho \"密码策略检查\"\necho \"------------\"\ngrep -v \"#\" /etc/login.defs | grep -E \"PASS_MAX_DAYS|PASS_MIN_DAYS|PASS_MIN_LEN|PASS_WARN_AGE\"\n \n \n}\n \nfunction getSudoersStatus(){\necho \"\"\necho \"\"\necho \"############################ Sudoers检查 #########################\"\nconf=$(grep -v \"^#\" /etc/sudoers| grep -v \"^Defaults\" | sed '/^$/d')\necho \"$conf\"\necho \"\"\n#报表信息\nreport_Sudoers=\"$(echo $conf | wc -l)\"\n}\n \nfunction getInstalledStatus(){\necho \"\"\necho \"\"\necho \"############################ 软件检查 ############################\"\nrpm -qa --last | head | column -t \n}\n \nfunction getProcessStatus(){\necho \"\"\necho \"\"\necho \"############################ 进程检查 ############################\"\nif [ $(ps -ef | grep defunct | grep -v grep | wc -l) -ge 1 ];then\necho \"\"\necho \"僵尸进程\";\necho \"--------\"\nps -ef | head -n1\nps -ef | grep defunct | grep -v grep\nfi\necho \"\"\necho \"内存占用TOP10\"\necho \"-------------\"\necho -e \"PID %MEM RSS COMMAND\n$(ps aux | awk '{print $2, $4, $6, $11}' | sort -k3rn | head -n 10 )\"| column -t \necho \"\"\necho \"CPU占用TOP10\"\necho \"------------\"\ntop b -n1 | head -17 | tail -11\n#报表信息\nreport_DefunctProsess=\"$(ps -ef | grep defunct | grep -v grep|wc -l)\"\n}\n \nfunction getJDKStatus(){\necho \"\"\necho \"\"\necho \"############################ JDK检查 #############################\"\njava -version 2>/dev/null\nif [ $? -eq 0 ];then\njava -version 2>&1\nfi\necho \"JAVA_HOME=\\\"$JAVA_HOME\\\"\"\n#报表信息\nreport_JDK=\"$(java -version 2>&1 | grep version | awk '{print $1,$3}' | tr -d '\"')\"\n}\nfunction getSyslogStatus(){\necho \"\"\necho \"\"\necho \"############################ syslog检查 ##########################\"\necho \"服务状态：$(getState rsyslog)\"\necho \"\"\necho \"/etc/rsyslog.conf\"\necho \"-----------------\"\ncat /etc/rsyslog.conf 2>/dev/null | grep -v \"^#\" | grep -v \"^\\\\$\" | sed '/^$/d' | column -t\n#报表信息\nreport_Syslog=\"$(getState rsyslog)\"\n}\nfunction getFirewallStatus(){\necho \"\"\necho \"\"\necho \"############################ 防火墙检查 ##########################\"\n#防火墙状态，策略等\nif [[ $centosVersion < 7 ]];then\n/etc/init.d/iptables status >/dev/null 2>&1\nstatus=$?\nif [ $status -eq 0 ];then\ns=\"active\"\nelif [ $status -eq 3 ];then\ns=\"inactive\"\nelif [ $status -eq 4 ];then\ns=\"permission denied\"\nelse\ns=\"unknown\"\nfi\nelse\ns=\"$(getState iptables)\"\nfi\necho \"iptables: $s\"\necho \"\"\necho \"/etc/sysconfig/iptables\"\necho \"-----------------------\"\ncat /etc/sysconfig/iptables 2>/dev/null\n#报表信息\nreport_Firewall=\"$s\"\n}\n \nfunction getSNMPStatus(){\n#SNMP服务状态，配置等\necho \"\"\necho \"\"\necho \"############################ SNMP检查 ############################\"\nstatus=\"$(getState snmpd)\"\necho \"服务状态：$status\"\necho \"\"\nif [ -e /etc/snmp/snmpd.conf ];then\necho \"/etc/snmp/snmpd.conf\"\necho \"--------------------\"\ncat /etc/snmp/snmpd.conf 2>/dev/null | grep -v \"^#\" | sed '/^$/d'\nfi\n#报表信息\nreport_SNMP=\"$(getState snmpd)\"\n}\n \n \n \nfunction getState(){\nif [[ $centosVersion < 7 ]];then\nif [ -e \"/etc/init.d/$1\" ];then\nif [ `/etc/init.d/$1 status 2>/dev/null | grep -E \"is running|正在运行\" | wc -l` -ge 1 ];then\nr=\"active\"\nelse\nr=\"inactive\"\nfi\nelse\nr=\"unknown\"\nfi\nelse\n#CentOS 7+\nr=\"$(systemctl is-active $1 2>&1)\"\nfi\necho \"$r\"\n}\n \nfunction getSSHStatus(){\n#SSHD服务状态，配置,受信任主机等\necho \"\"\necho \"\"\necho \"############################ SSH检查 #############################\"\n#检查受信任主机\npwdfile=\"$(cat /etc/passwd)\"\necho \"服务状态：$(getState sshd)\"\nProtocol_Version=$(cat /etc/ssh/sshd_config | grep Protocol | awk '{print $2}')\necho \"SSH协议版本：$Protocol_Version\"\necho \"\"\necho \"信任主机\"\necho \"--------\"\nauthorized=0\nfor user in $(echo \"$pwdfile\" | grep /bin/bash | awk -F: '{print $1}');do\nauthorize_file=$(echo \"$pwdfile\" | grep -w $user | awk -F: '{printf $6\"/.ssh/authorized_keys\"}')\nauthorized_host=$(cat $authorize_file 2>/dev/null | awk '{print $3}' | tr '\\n' ',' | sed 's/,$//')\nif [ ! -z $authorized_host ];then\necho \"$user 授权 \\\"$authorized_host\\\" 无密码访问\"\nfi\nlet authorized=authorized+$(cat $authorize_file 2>/dev/null | awk '{print $3}'|wc -l)\ndone\n \necho \"\"\necho \"是否允许ROOT远程登录\"\necho \"--------------------\"\nconfig=$(cat /etc/ssh/sshd_config | grep PermitRootLogin)\nfirstChar=${config:0:1}\nif [ $firstChar == \"#\" ];then\nPermitRootLogin=\"yes\" #默认是允许ROOT远程登录的\nelse\nPermitRootLogin=$(echo $config | awk '{print $2}')\nfi\necho \"PermitRootLogin $PermitRootLogin\"\n \necho \"\"\necho \"/etc/ssh/sshd_config\"\necho \"--------------------\"\ncat /etc/ssh/sshd_config | grep -v \"^#\" | sed '/^$/d'\n \n#报表信息\nreport_SSHAuthorized=\"$authorized\" #SSH信任主机\nreport_SSHDProtocolVersion=\"$Protocol_Version\" #SSH协议版本\nreport_SSHDPermitRootLogin=\"$PermitRootLogin\" #允许root远程登录\n}\nfunction getNTPStatus(){\n#NTP服务状态，当前时间，配置等\necho \"\"\necho \"\"\necho \"############################ NTP检查 #############################\"\nif [ -e /etc/ntp.conf ];then\necho \"服务状态：$(getState ntpd)\"\necho \"\"\necho \"/etc/ntp.conf\"\necho \"-------------\"\ncat /etc/ntp.conf 2>/dev/null | grep -v \"^#\" | sed '/^$/d'\nfi\n#报表信息\nreport_NTP=\"$(getState ntpd)\"\n}\n \n \nfunction uploadHostDailyCheckReport(){\njson=\"{\n\\\"DateTime\\\":\\\"$report_DateTime\\\",\n\\\"Hostname\\\":\\\"$report_Hostname\\\",\n\\\"OSRelease\\\":\\\"$report_OSRelease\\\",\n\\\"Kernel\\\":\\\"$report_Kernel\\\",\n\\\"Language\\\":\\\"$report_Language\\\",\n\\\"LastReboot\\\":\\\"$report_LastReboot\\\",\n\\\"Uptime\\\":\\\"$report_Uptime\\\",\n\\\"CPUs\\\":\\\"$report_CPUs\\\",\n\\\"CPUType\\\":\\\"$report_CPUType\\\",\n\\\"Arch\\\":\\\"$report_Arch\\\",\n\\\"MemTotal\\\":\\\"$report_MemTotal\\\",\n\\\"MemFree\\\":\\\"$report_MemFree\\\",\n\\\"MemUsedPercent\\\":\\\"$report_MemUsedPercent\\\",\n\\\"DiskTotal\\\":\\\"$report_DiskTotal\\\",\n\\\"DiskFree\\\":\\\"$report_DiskFree\\\",\n\\\"DiskUsedPercent\\\":\\\"$report_DiskUsedPercent\\\",\n\\\"InodeTotal\\\":\\\"$report_InodeTotal\\\",\n\\\"InodeFree\\\":\\\"$report_InodeFree\\\",\n\\\"InodeUsedPercent\\\":\\\"$report_InodeUsedPercent\\\",\n\\\"IP\\\":\\\"$report_IP\\\",\n\\\"MAC\\\":\\\"$report_MAC\\\",\n\\\"Gateway\\\":\\\"$report_Gateway\\\",\n\\\"DNS\\\":\\\"$report_DNS\\\",\n\\\"Listen\\\":\\\"$report_Listen\\\",\n\\\"Selinux\\\":\\\"$report_Selinux\\\",\n\\\"Firewall\\\":\\\"$report_Firewall\\\",\n\\\"USERs\\\":\\\"$report_USERs\\\",\n\\\"USEREmptyPassword\\\":\\\"$report_USEREmptyPassword\\\",\n\\\"USERTheSameUID\\\":\\\"$report_USERTheSameUID\\\",\n\\\"PasswordExpiry\\\":\\\"$report_PasswordExpiry\\\",\n\\\"RootUser\\\":\\\"$report_RootUser\\\",\n\\\"Sudoers\\\":\\\"$report_Sudoers\\\",\n\\\"SSHAuthorized\\\":\\\"$report_SSHAuthorized\\\",\n\\\"SSHDProtocolVersion\\\":\\\"$report_SSHDProtocolVersion\\\",\n\\\"SSHDPermitRootLogin\\\":\\\"$report_SSHDPermitRootLogin\\\",\n\\\"DefunctProsess\\\":\\\"$report_DefunctProsess\\\",\n\\\"SelfInitiatedService\\\":\\\"$report_SelfInitiatedService\\\",\n\\\"SelfInitiatedProgram\\\":\\\"$report_SelfInitiatedProgram\\\",\n\\\"RuningService\\\":\\\"$report_RuningService\\\",\n\\\"Crontab\\\":\\\"$report_Crontab\\\",\n\\\"Syslog\\\":\\\"$report_Syslog\\\",\n\\\"SNMP\\\":\\\"$report_SNMP\\\",\n\\\"NTP\\\":\\\"$report_NTP\\\",\n\\\"JDK\\\":\\\"$report_JDK\\\"\n}\"\n#echo \"$json\" \ncurl -l -H \"Content-type: application/json\" -X POST -d \"$json\" \"$uploadHostDailyCheckReportApi\" 2>/dev/null\n}\n\nfunction getchage_file_24h()\n{\necho \"############################ 文件检查 #############################\"\n    check2=$(find / -name '*.sh' -mtime -1)\ncheck21=$(find / -name '*.asp' -mtime -1)\ncheck22=$(find / -name '*.php' -mtime -1)\ncheck23=$(find / -name '*.aspx' -mtime -1)\ncheck24=$(find / -name '*.jsp' -mtime -1)\ncheck25=$(find / -name '*.html' -mtime -1)\ncheck26=$(find / -name '*.htm' -mtime -1)\ncheck9=$(find / -name core -exec ls -l {} \\;)\ncheck10=$(cat /etc/crontab)\ncheck12=$(ls -alt /usr/bin | head -10)\ncat <<EOF\n\n############################查看所有被修改过的文件返回最近24小时内的############################\n${check2}\n${check21}\n${check22}\n${check23}\n${check24}\n${check25}\n${check26}\n${line}\n \n############################检查定时文件的完整性############################\n${check10}\n${line}\n\n############################查看系统命令是否被替换############################\n${check12}\n${line}\nEOF\n}\n \nfunction check(){\nversion\ngetSystemStatus\ngetCpuStatus\ngetMemStatus\ngetDiskStatus\ngetNetworkStatus\ngetListenStatus\ngetProcessStatus\ngetServiceStatus\ngetAutoStartStatus\ngetLoginStatus\ngetCronStatus\ngetUserStatus\ngetPasswordStatus\ngetSudoersStatus\ngetJDKStatus\ngetFirewallStatus\ngetSSHStatus\ngetSyslogStatus\ngetSNMPStatus\ngetNTPStatus\ngetInstalledStatus\ngetchage_file_24h\n}\n \n \n#执行检查并保存检查结果\ncheck > $RESULTFILE\n \necho \"检查结果：$RESULTFILE\"\necho -e \"`date \"+%Y-%m-%d %H:%M:%S\"` 阿里云PHP企业平台巡检报告\"  | mail -a $RESULTFILE -s \"阿里云PHP企业平台巡检报告\" h@163.com\n\n```\n\n参考知乎专栏[《Linux服务器日常巡检脚本分享》](https://zhuanlan.zhihu.com/p/435262080)",
      "data": {
        "title": "Linux 主机每日巡检脚本",
        "date": "2021-11-22 15:05:01",
        "tags": [
          "Linux"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/linux-zhu-ji-mei-ri-xun-jian-jiao-ben.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "linux-zhu-ji-mei-ri-xun-jian-jiao-ben"
    },
    {
      "content": "### 来源\n\n这是基于Github Pages 的静态网站，GitHub账号为[hiwyb](https://github.com/hiwyb)。\n\n\n### 目的\n\n一些技术分享和开发过程中的感悟。",
      "data": {
        "title": "我的第一篇技术文章",
        "date": "2021-11-22 13:59:33",
        "tags": [
          "Gridea"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/wo-de-di-yi-pian-ji-zhu-wen-zhang.jpg",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "wo-de-di-yi-pian-ji-zhu-wen-zhang"
    },
    {
      "content": "> 欢迎来到我的小站呀，很高兴遇见你！🤝\n\n## 🏠 关于本站\n\n## 👨‍💻 博主是谁\n\n后厂村搬砖工一枚~主要从事iOS开发工作，另外会写点JavaScript、Python、shell等开发语言；对Linux主机感兴趣，爱好科学上网！\n\n## ⛹ 兴趣爱好\n\n## 📬 联系我呀\n\n- [GitHub地址：https://github.com/wangyingbo/](https://github.com/wangyingbo/)\n- [邮箱：wybgit@gmail.com](wybgit@gmail.com)\n",
      "data": {
        "title": "关于",
        "date": "2019-01-25 19:09:48",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null,
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "about"
    },
    {
      "content": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... \n\n<!-- more -->\n\n[Github](https://github.com/getgridea/gridea)  \n[Gridea 主页](https://gridea.dev/)  \n[示例网站](http://fehey.com/)\n\n## 特性👇\n📝  你可以使用最酷的 **Markdown** 语法，进行快速创作  \n\n🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片  \n\n🏷️  你可以对文章进行标签分组  \n\n📋  你可以自定义菜单，甚至可以创建外部链接菜单  \n\n💻  你可以在 **Windows**，**MacOS** 或 **Linux** 设备上使用此客户端  \n\n🌎  你可以使用 **𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌** 或 **Coding Pages** 向世界展示，未来将支持更多平台  \n\n💬  你可以进行简单的配置，接入 [Gitalk](https://github.com/gitalk/gitalk) 或 [DisqusJS](https://github.com/SukkaW/DisqusJS) 评论系统  \n\n🇬🇧  你可以使用**中文简体**或**英语**  \n\n🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力  \n\n🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步  \n\n🌱 当然 **Gridea** 还很年轻，有很多不足，但请相信，它会不停向前 🏃\n\n未来，它一定会成为你离不开的伙伴\n\n尽情发挥你的才华吧！\n\n😘 Enjoy~\n",
      "data": {
        "title": "Hello Gridea",
        "date": "2018-12-12 00:00:00",
        "tags": [
          "Gridea"
        ],
        "published": true,
        "hideInList": false,
        "feature": "/post-images/hello-gridea.png",
        "isTop": false
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "👏  欢迎使用 **Gridea** ！  \n✍️  **Gridea** 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... ",
      "fileName": "hello-gridea"
    }
  ],
  "tags": [
    {
      "name": "Mac软件",
      "slug": "y_z5IpA2B",
      "used": true
    },
    {
      "name": "shell",
      "slug": "DWwfs7VRV",
      "used": true
    },
    {
      "name": "GitHub",
      "slug": "EtiZT3XPY",
      "used": true
    },
    {
      "name": "Linux",
      "slug": "d2YeVEjXB",
      "used": true
    },
    {
      "name": "Gridea",
      "slug": "mRrbZXfqU",
      "used": true
    }
  ],
  "menus": [
    {
      "link": "/",
      "name": "首页",
      "openType": "Internal"
    },
    {
      "link": "/archives",
      "name": "归档",
      "openType": "Internal"
    },
    {
      "link": "/tags",
      "name": "标签",
      "openType": "Internal"
    },
    {
      "link": "/post/about",
      "name": "关于",
      "openType": "Internal"
    }
  ]
}